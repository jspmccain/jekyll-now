number_games,
magnitude_of_win){
team_1_vec <- vector()
for(game in 1:number_games){
team_1 <- rnorm(n = number_players,
mean = team_average_1,
sd = std_dev)
team_2 <- rnorm(n = number_players,
mean = team_average_2,
sd = std_dev)
if(mean(team_1) > mean(team_2)){
team_1_vec <- c(team_1_vec, 1)
}
team_1_minus_2 <- vector(team_1 - team_2)
}
conclusion <- paste('Team 1 won ',
sum(team_1_vec),
" games, and Team 2 won ",
(number_games - sum(team_1_vec)),
".",
sep = "")
finale <- list(conclusion, team_1_minus_2)
return(conclusion)
}
tennis_tournament2 <- winner_winner_chicken_dinner(team_average_1 = 50,
team_average_2 = 50,
std_dev = 10,
number_players = 1,
number_games = 100)
vector1 <- c(1, 2, 3)
vector2 <- c(2, 3, 4)
vector1 - vector2
winner_winner_chicken_dinner <- function(team_average_1,
team_average_2,
std_dev,
number_players,
number_games){
team_1_vec <- vector()
for(game in 1:number_games){
team_1 <- rnorm(n = number_players,
mean = team_average_1,
sd = std_dev)
team_2 <- rnorm(n = number_players,
mean = team_average_2,
sd = std_dev)
if(mean(team_1) > mean(team_2)){
team_1_vec <- c(team_1_vec, 1)
}
team_1_minus_2 <- team_1 - team_2
}
conclusion <- paste('Team 1 won ',
sum(team_1_vec),
" games, and Team 2 won ",
(number_games - sum(team_1_vec)),
".",
sep = "")
finale <- list(conclusion, team_1_minus_2)
return(conclusion)
}
tennis_tournament2 <- winner_winner_chicken_dinner(team_average_1 = 50,
team_average_2 = 50,
std_dev = 10,
number_players = 1,
number_games = 100)
tennis_tournament2
tennis_tournament2[1]
tennis_tournament2[2]
winner_winner_chicken_dinner <- function(team_average_1,
team_average_2,
std_dev,
number_players,
number_games){
team_1_vec <- vector()
team_1_minus_2 <- vector()
for(game in 1:number_games){
team_1 <- rnorm(n = number_players,
mean = team_average_1,
sd = std_dev)
team_2 <- rnorm(n = number_players,
mean = team_average_2,
sd = std_dev)
if(mean(team_1) > mean(team_2)){
team_1_vec <- c(team_1_vec, 1)
}
team_1_minus_2 <- mean(team_1) - mean(team_2)
}
conclusion <- paste('Team 1 won ',
sum(team_1_vec),
" games, and Team 2 won ",
(number_games - sum(team_1_vec)),
".",
sep = "")
finale <- list(conclusion, team_1_minus_2)
return(conclusion)
}
tennis_tournament2 <- winner_winner_chicken_dinner(team_average_1 = 50,
team_average_2 = 50,
std_dev = 10,
number_players = 1,
number_games = 100)
tennis_tournament2
tennis_tournament2[[2]]
tennis_tournament2[2]
tennis_tournament2 %>% str()
return(finale)
winner_winner_chicken_dinner <- function(team_average_1,
team_average_2,
std_dev,
number_players,
number_games){
team_1_vec <- vector()
team_1_minus_2 <- vector()
for(game in 1:number_games){
team_1 <- rnorm(n = number_players,
mean = team_average_1,
sd = std_dev)
team_2 <- rnorm(n = number_players,
mean = team_average_2,
sd = std_dev)
if(mean(team_1) > mean(team_2)){
team_1_vec <- c(team_1_vec, 1)
}
team_1_minus_2 <- mean(team_1) - mean(team_2)
}
conclusion <- paste('Team 1 won ',
sum(team_1_vec),
" games, and Team 2 won ",
(number_games - sum(team_1_vec)),
".",
sep = "")
finale <- list(conclusion, team_1_minus_2)
return(finale)
}
tennis_tournament2 <- winner_winner_chicken_dinner(team_average_1 = 50,
team_average_2 = 50,
std_dev = 10,
number_players = 1,
number_games = 100)
tennis_tournament2
tennis_tournament2[[2]]
winner_winner_chicken_dinner <- function(team_average_1,
team_average_2,
std_dev,
number_players,
number_games){
team_1_vec <- vector()
team_1_minus_2 <- vector()
for(game in 1:number_games){
team_1 <- rnorm(n = number_players,
mean = team_average_1,
sd = std_dev)
team_2 <- rnorm(n = number_players,
mean = team_average_2,
sd = std_dev)
if(mean(team_1) > mean(team_2)){
team_1_vec <- c(team_1_vec, 1)
}
team_1_minus_2 <- c(team_1_minus_2, mean(team_1) - mean(team_2))
}
conclusion <- paste('Team 1 won ',
sum(team_1_vec),
" games, and Team 2 won ",
(number_games - sum(team_1_vec)),
".",
sep = "")
finale <- list(conclusion, team_1_minus_2)
return(finale)
}
tennis_tournament2 <- winner_winner_chicken_dinner(team_average_1 = 50,
team_average_2 = 50,
std_dev = 10,
number_players = 1,
number_games = 100)
tennis_tournament2[[2]]
hockey_tournament <- winner_winner_chicken_dinner(team_average_1 = 50,
team_average_2 = 50,
std_dev = 10,
number_players = 20,
number_games = 100)
hist(hockey_tournament[[2]],
main = paste("Hockey Tournament: ", hockey_tournament[[1]]),
ylab = "Count",
xlab = "Difference in Skill Level between Teams")
devtools::install_github('rstudio/blogdown')
library(blogdown)
KnitPost <- function(site.path='/pathToYourBlog/', overwriteAll=F, overwriteOne=NULL) {
if(!'package:knitr' %in% search()) library('knitr')
## Blog-specific directories.  This will depend on how you organize your blog.
site.path <- site.path # directory of jekyll blog (including trailing slash)
rmd.path <- paste0(site.path, "_Rmd") # directory where your Rmd-files reside (relative to base)
fig.dir <- "assets/Rfig/" # directory to save figures
posts.path <- paste0(site.path, "_posts/articles/") # directory for converted markdown files
cache.path <- paste0(site.path, "_cache") # necessary for plots
render_jekyll(highlight = "pygments")
opts_knit$set(base.url = '/', base.dir = site.path)
opts_chunk$set(fig.path=fig.dir, fig.width=8.5, fig.height=5.25, dev='svg', cache=F,
warning=F, message=F, cache.path=cache.path, tidy=F)
setwd(rmd.path) # setwd to base
# some logic to help us avoid overwriting already existing md files
files.rmd <- data.frame(rmd = list.files(path = rmd.path,
full.names = T,
pattern = "\\.Rmd$",
ignore.case = T,
recursive = F), stringsAsFactors=F)
files.rmd$corresponding.md.file <- paste0(posts.path, "/", basename(gsub(pattern = "\\.Rmd$", replacement = ".md", x = files.rmd$rmd)))
files.rmd$corresponding.md.exists <- file.exists(files.rmd$corresponding.md.file)
## determining which posts to overwrite from parameters overwriteOne & overwriteAll
files.rmd$md.overwriteAll <- overwriteAll
if(is.null(overwriteOne)==F) files.rmd$md.overwriteAll[grep(overwriteOne, files.rmd[,'rmd'], ignore.case=T)] <- T
files.rmd$md.render <- F
for (i in 1:dim(files.rmd)[1]) {
if (files.rmd$corresponding.md.exists[i] == F) {
files.rmd$md.render[i] <- T
}
if ((files.rmd$corresponding.md.exists[i] == T) && (files.rmd$md.overwriteAll[i] == T)) {
files.rmd$md.render[i] <- T
}
}
# For each Rmd file, render markdown (contingent on the flags set above)
for (i in 1:dim(files.rmd)[1]) {
if (files.rmd$md.render[i] == T) {
out.file <- knit(as.character(files.rmd$rmd[i]),
output = as.character(files.rmd$corresponding.md.file[i]),
envir = parent.frame(),
quiet = T)
message(paste0("KnitPost(): ", basename(files.rmd$rmd[i])))
}
}
}
getwd()
readClipboard()
KnitPost(site.path = "C:/Users/Scott/Google Drive/jspmccain.github.io")
KnitPost(site.path = "C:/Users/Scott/Google Drive/jspmccain.github.io/")
readClipboard()
readClipboard()
KnitPost(site.path = 'C:/Users/Scott/Google Drive/jspmccain.github.io/_posts/')
setwd('C:/Users/Scott/Google Drive/jspmccain.github.io/_posts/')
rmd2md <- function( path_site = getwd(),
dir_rmd = "_rmd",
dir_md = "_posts",
#dir_images = "figures",
url_images = "figures/",
out_ext='.md',
in_ext='.rmd',
recursive=FALSE) {
require(knitr, quietly=TRUE, warn.conflicts=FALSE)
#andy change to avoid path problems when running without sh on windows
files <- list.files(path=file.path(path_site,dir_rmd), pattern=in_ext, ignore.case=TRUE, recursive=recursive)
for(f in files) {
message(paste("Processing ", f, sep=''))
content <- readLines(file.path(path_site,dir_rmd,f))
frontMatter <- which(substr(content, 1, 3) == '---')
if(length(frontMatter) >= 2 & 1 %in% frontMatter) {
statusLine <- which(substr(content, 1, 7) == 'status:')
publishedLine <- which(substr(content, 1, 10) == 'published:')
if(statusLine > frontMatter[1] & statusLine < frontMatter[2]) {
status <- unlist(strsplit(content[statusLine], ':'))[2]
status <- sub('[[:space:]]+$', '', status)
status <- sub('^[[:space:]]+', '', status)
if(tolower(status) == 'process') {
#This is a bit of a hack but if a line has zero length (i.e. a
#black line), it will be removed in the resulting markdown file.
#This will ensure that all line returns are retained.
content[nchar(content) == 0] <- ' '
message(paste('Processing ', f, sep=''))
content[statusLine] <- 'status: publish'
content[publishedLine] <- 'published: true'
#andy change to path
outFile <- file.path(path_site, dir_md, paste0(substr(f, 1, (nchar(f)-(nchar(in_ext)))), out_ext))
#render_markdown(strict=TRUE)
#render_markdown(strict=FALSE) #code didn't render properly on blog
#andy change to render for jekyll
render_jekyll(highlight = "pygments")
#render_jekyll(highlight = "prettify") #for javascript
opts_knit$set(out.format='markdown')
# andy BEWARE don't set base.dir!! it caused me problems
# "base.dir is never used when composing the URL of the figures; it is
# only used to save the figures to a different directory.
# The URL of an image is always base.url + fig.path"
# https://groups.google.com/forum/#!topic/knitr/18aXpOmsumQ
opts_knit$set(base.url = "/")
opts_chunk$set(fig.path = url_images)
#andy I could try to make figures bigger
#but that might make not work so well on mobile
#opts_chunk$set(fig.width  = 8.5,
#               fig.height = 5.25)
try(knit(text=content, output=outFile), silent=FALSE)
} else {
warning(paste("Not processing ", f, ", status is '", status,
"'. Set status to 'process' to convert.", sep=''))
}
} else {
warning("Status not found in front matter.")
}
} else {
warning("No front matter found. Will not process this file.")
}
}
invisible()
}
rmd2md()
rmd2md()
rmd2md <- function(
path_site = getwd(),
dir_rmd = "_rmd",
dir_md = "_posts",
#dir_images = "figures",
url_images = "figures/",
out_ext='.md',
in_ext='.rmd',
recursive=FALSE)
path_site = getwd(),
dir_rmd = "_rmd",
dir_md = "_posts",
#dir_images = "figures",
url_images = "figures/",
out_ext='.md',
in_ext='.rmd',
recursive=FALSE)
path_site = getwd()#,
dir_rmd = "_rmd"#,
dir_md = "_posts"#,
url_images = "figures/"#,
out_ext='.md'#,
in_ext='.rmd'#,
recursive=FALSE#)
require(knitr, quietly=TRUE, warn.conflicts=FALSE)
files <- list.files(path=file.path(path_site,dir_rmd), pattern=in_ext, ignore.case=TRUE, recursive=recursive)
files
file.path(path_site,dir_rmd)
list.files(path = file.path(path_site,dir_rmd),
pattern=in_ext,
ignore.case=TRUE,
recursive=recursive)
list.files(path = file.path(path_site))
files <- list.files(path = file.path(path_site))#,dir_rmd),
for(f in files) {
message(paste("Processing ", f, sep=''))
content <- readLines(file.path(path_site,dir_rmd,f))
frontMatter <- which(substr(content, 1, 3) == '---')
if(length(frontMatter) >= 2 & 1 %in% frontMatter) {
statusLine <- which(substr(content, 1, 7) == 'status:')
publishedLine <- which(substr(content, 1, 10) == 'published:')
if(statusLine > frontMatter[1] & statusLine < frontMatter[2]) {
status <- unlist(strsplit(content[statusLine], ':'))[2]
status <- sub('[[:space:]]+$', '', status)
status <- sub('^[[:space:]]+', '', status)
if(tolower(status) == 'process') {
#This is a bit of a hack but if a line has zero length (i.e. a
#black line), it will be removed in the resulting markdown file.
#This will ensure that all line returns are retained.
content[nchar(content) == 0] <- ' '
message(paste('Processing ', f, sep=''))
content[statusLine] <- 'status: publish'
content[publishedLine] <- 'published: true'
#andy change to path
outFile <- file.path(path_site, dir_md, paste0(substr(f, 1, (nchar(f)-(nchar(in_ext)))), out_ext))
#render_markdown(strict=TRUE)
#render_markdown(strict=FALSE) #code didn't render properly on blog
#andy change to render for jekyll
render_jekyll(highlight = "pygments")
#render_jekyll(highlight = "prettify") #for javascript
opts_knit$set(out.format='markdown')
# andy BEWARE don't set base.dir!! it caused me problems
# "base.dir is never used when composing the URL of the figures; it is
# only used to save the figures to a different directory.
# The URL of an image is always base.url + fig.path"
# https://groups.google.com/forum/#!topic/knitr/18aXpOmsumQ
opts_knit$set(base.url = "/")
opts_chunk$set(fig.path = url_images)
#andy I could try to make figures bigger
#but that might make not work so well on mobile
#opts_chunk$set(fig.width  = 8.5,
#               fig.height = 5.25)
try(knit(text=content, output=outFile), silent=FALSE)
} else {
warning(paste("Not processing ", f, ", status is '", status,
"'. Set status to 'process' to convert.", sep=''))
}
} else {
warning("Status not found in front matter.")
}
} else {
warning("No front matter found. Will not process this file.")
}
}
files
files <- files[2]
files
for(f in files) {
# files
message(paste("Processing ", f, sep=''))
content <- readLines(file.path(path_site,dir_rmd,f))
frontMatter <- which(substr(content, 1, 3) == '---')
if(length(frontMatter) >= 2 & 1 %in% frontMatter) {
statusLine <- which(substr(content, 1, 7) == 'status:')
publishedLine <- which(substr(content, 1, 10) == 'published:')
if(statusLine > frontMatter[1] & statusLine < frontMatter[2]) {
status <- unlist(strsplit(content[statusLine], ':'))[2]
status <- sub('[[:space:]]+$', '', status)
status <- sub('^[[:space:]]+', '', status)
if(tolower(status) == 'process') {
#This is a bit of a hack but if a line has zero length (i.e. a
#black line), it will be removed in the resulting markdown file.
#This will ensure that all line returns are retained.
content[nchar(content) == 0] <- ' '
message(paste('Processing ', f, sep=''))
content[statusLine] <- 'status: publish'
content[publishedLine] <- 'published: true'
#andy change to path
outFile <- file.path(path_site, dir_md, paste0(substr(f, 1, (nchar(f)-(nchar(in_ext)))), out_ext))
#render_markdown(strict=TRUE)
#render_markdown(strict=FALSE) #code didn't render properly on blog
#andy change to render for jekyll
render_jekyll(highlight = "pygments")
#render_jekyll(highlight = "prettify") #for javascript
opts_knit$set(out.format='markdown')
# andy BEWARE don't set base.dir!! it caused me problems
# "base.dir is never used when composing the URL of the figures; it is
# only used to save the figures to a different directory.
# The URL of an image is always base.url + fig.path"
# https://groups.google.com/forum/#!topic/knitr/18aXpOmsumQ
opts_knit$set(base.url = "/")
opts_chunk$set(fig.path = url_images)
#andy I could try to make figures bigger
#but that might make not work so well on mobile
#opts_chunk$set(fig.width  = 8.5,
#               fig.height = 5.25)
try(knit(text=content, output=outFile), silent=FALSE)
} else {
warning(paste("Not processing ", f, ", status is '", status,
"'. Set status to 'process' to convert.", sep=''))
}
} else {
warning("Status not found in front matter.")
}
} else {
warning("No front matter found. Will not process this file.")
}
}
file.path(path_site)
files <- list.files(path = file.path(path_site))#,dir_rmd),
files
files <- files[2]
files
f <- files
f
message(paste("Processing ", f, sep=''))
content <- readLines(file.path(path_site,dir_rmd,f))
content <- readLines(f)
content
frontMatter <- which(substr(content, 1, 3) == '---')
frontMatter
if(length(frontMatter) >= 2 & 1 %in% frontMatter) {
statusLine <- which(substr(content, 1, 7) == 'status:')
publishedLine <- which(substr(content, 1, 10) == 'published:')
if(statusLine > frontMatter[1] & statusLine < frontMatter[2]) {
status <- unlist(strsplit(content[statusLine], ':'))[2]
status <- sub('[[:space:]]+$', '', status)
status <- sub('^[[:space:]]+', '', status)
if(tolower(status) == 'process') {
#This is a bit of a hack but if a line has zero length (i.e. a
#black line), it will be removed in the resulting markdown file.
#This will ensure that all line returns are retained.
content[nchar(content) == 0] <- ' '
message(paste('Processing ', f, sep=''))
content[statusLine] <- 'status: publish'
content[publishedLine] <- 'published: true'
#andy change to path
outFile <- file.path(path_site, dir_md, paste0(substr(f, 1, (nchar(f)-(nchar(in_ext)))), out_ext))
#render_markdown(strict=TRUE)
#render_markdown(strict=FALSE) #code didn't render properly on blog
#andy change to render for jekyll
render_jekyll(highlight = "pygments")
#render_jekyll(highlight = "prettify") #for javascript
opts_knit$set(out.format='markdown')
# andy BEWARE don't set base.dir!! it caused me problems
# "base.dir is never used when composing the URL of the figures; it is
# only used to save the figures to a different directory.
# The URL of an image is always base.url + fig.path"
# https://groups.google.com/forum/#!topic/knitr/18aXpOmsumQ
opts_knit$set(base.url = "/")
opts_chunk$set(fig.path = url_images)
#andy I could try to make figures bigger
#but that might make not work so well on mobile
#opts_chunk$set(fig.width  = 8.5,
#               fig.height = 5.25)
try(knit(text=content, output=outFile), silent=FALSE)
} else {
warning(paste("Not processing ", f, ", status is '", status,
"'. Set status to 'process' to convert.", sep=''))
}
} else {
warning("Status not found in front matter.")
}
} else {
warning("No front matter found. Will not process this file.")
}
render_jekyll(highlight = "pygments")
opts_knit$set(out.format = "markdown")
library(knitr)
opts_knit$set(base.url = base.url)
base.url <- '/'
base.url
opts_knit$set(base.url = base.url)
fig.path <- paste0("jspmccain.github.io/_images/",
sub(".Rmd$", "", basename(input)), "/")
?sub
?render_jekyll
print(winner_winner_chicken_dinner())
print(winner_winner_chicken_dinner
)
